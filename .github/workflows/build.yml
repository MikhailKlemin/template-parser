name: Go Build & Test

on:
  push:
    branches:
      - master

jobs:
  build:
    # Use a matrix to run on both Linux and Windows runners
    strategy:
      matrix:
        goos: [linux, windows]
        goarch: [amd64]
        include:
          - goos: linux
            os: ubuntu-22.04
          - goos: windows
            os: windows-latest

    runs-on: ${{ matrix.os }} # Run on the native OS

    steps:
      # 1. Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Setup Go with built-in caching and version from go.mod
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          cache: true

      # 3. Run unit tests with race detector
      - name: Run unit tests
        run: go test -race -v ./...

      # 4. Build executable
      - name: Build
        run: |
          mkdir -p build
          if [ "${{ matrix.goos }}" == "windows" ]; then
            go build -o build/template-parser-${{ matrix.goos }}-${{ matrix.goarch }}.exe ./cmd/template-parser
          else
            go build -o build/template-parser-${{ matrix.goos }}-${{ matrix.goarch }} ./cmd/template-parser
          fi

      # 5. Zip binaries
      # Note: For Windows runner, 'zip' is not available by default.
      # 'Compress-Archive' is the native PowerShell command.
      - name: Zip binary
        if: matrix.os == 'ubuntu-22.04'
        run: zip -j build/template-parser-${{ matrix.goos }}-${{ matrix.goarch }}.zip build/*
      - name: Zip binary
        if: matrix.os == 'windows-latest'
        run: Compress-Archive -Path build\* -DestinationPath build\template-parser-${{ matrix.goos }}-${{ matrix.goarch }}.zip

      # 6. Upload artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: template-parser-${{ matrix.goos }}-${{ matrix.goarch }}
          path: build/*.zip
