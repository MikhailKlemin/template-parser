name: Go Build & Test

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows]
        goarch: [amd64]

    steps:
      # 1. Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Setup Go
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.25

      # 3. Use isolated Go module cache (avoids permission issues)
      - name: Set Go module cache
        run: |
          mkdir -p $GITHUB_WORKSPACE/go/pkg/mod
          echo "GOMODCACHE=$GITHUB_WORKSPACE/go/pkg/mod" >> $GITHUB_ENV

      # 4. Cache Go modules
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ${{ github.workspace }}/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.goos }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # 5. Run unit tests
      - name: Run unit tests
        run: go test ./... -v

      # 6. Build executable
      - name: Build
        run: |
          mkdir -p build
          if [ "${{ matrix.goos }}" == "windows" ]; then
            go build -o build/template-parser-${{ matrix.goos }}-${{ matrix.goarch }}.exe ./cmd/template-parser
          else
            go build -o build/template-parser-${{ matrix.goos }}-${{ matrix.goarch }} ./cmd/template-parser
          fi

      # 7. Zip binaries (optional)
      - name: Zip binary
        run: |
          cd build
          zip template-parser-${{ matrix.goos }}-${{ matrix.goarch }}.zip *

      # 8. Upload artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: template-parser-${{ matrix.goos }}-${{ matrix.goarch }}
          path: build/*.zip
